<?xml version="1.0"?>
<robot name="small_bot_description" xmlns:xacro="http://ros.org/wiki/xacro">
  <!--+++++++++++++++++++++++++++-->
  <!--                           -->
  <!--      Xacro Properties     -->
  <!--                           -->
  <!--+++++++++++++++++++++++++++-->

  <!-- Convert mm to meters -->
  <xacro:property name="mm_to_m" value="${0.001}"/>

  <!-- Convert inches to meters -->
  <xacro:property name="in_to_m" value="${0.0254}"/>

  <!-- Base Chassis Dimensions -->
  <!-- In meters -->
  <xacro:property name="base_length" value="${0.508}"/>
  <xacro:property name="base_width" value="${0.406}"/>
  <xacro:property name="base_height" value="${0.406}"/>

  <!-- Wheel Dimensions / Location -->
  <xacro:property name="wheel_diameter" value="${203.101 * mm_to_m}"/>
  <xacro:property name="wheel_radius" value="${wheel_diameter / 2}"/>
  <xacro:property name="wheel_width" value="${48 * mm_to_m}"/>
  <xacro:property name="wheel_y_gap" value="${0.012}"/>
  <xacro:property name="wheel_z_offset" value="${-(base_height / 2) + (wheel_radius - (1.5 * 0.041))}"/>
  <xacro:property name="wheel_y_offset" value="${(base_width / 2) + 2 * wheel_y_gap}"/>
  <xacro:property name="wheel_x_center_to_back" value="${.095}"/>
  <xacro:property name="wheel_x_offset" value="${(base_length / 2) - (wheel_x_center_to_back)}"/>

  <!-- Caster Dimensions / Location -->
  <xacro:property name="caster_diameter" value="${0.052}"/>
  <xacro:property name="caster_radius" value="${caster_diameter / 2}"/>
  <xacro:property name="caster_width" value="${16 * mm_to_m}"/>
  <xacro:property name="caster_z_offset" value="${0.012}"/>
  <xacro:property name="caster_y_offset" value="${0}"/>
  <xacro:property name="caster_x_offset" value="${0.0905}"/>

  <!-- Zed -->
  <xacro:arg name="camera_name"   default="zed" />
  <xacro:arg name="camera_model"  default="zed2i" />
  <xacro:arg name="use_zed_localization" default="true" />
  <xacro:property name="zed_z_offset" value="${0.508}"/>
  <xacro:property name="zed_y_offset" value="${0.0}"/>
  <xacro:property name="zed_x_offset" value="${base_length / 2}"/>
  
  <!-- 1) Include the macro -->
  <xacro:include filename="$(find zed_wrapper)/urdf/zed_macro.urdf.xacro"/>

  <!-- 2) Instantiate the macro, ignoring GNSS -->
  <!-- <xacro:zed_camera name="zed" model="zed2i" enable_gnss="false"/> -->

  <!--+++++++++++++++++++++++++++-->
  <!--                           -->
  <!--  Intertia property macros -->
  <!--                           -->
  <!--+++++++++++++++++++++++++++-->

  <xacro:macro name="chassis_inertia" params="m w h d">
    <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="box_inertia" params="m w d h">
    <inertial>
      <mass value="${m}"/>
      <inertia 
          ixx="${(m/12) * (h*h + d*d)}" 
          ixy="0.0" 
          ixz="0.0" 
          iyy="${(m/12) * (w*w + d*d)}" 
          iyz="0.0" 
          izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>


    <xacro:macro name="cylinder_inertia" params="m r h">
      <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
      </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
      <inertial>
        <mass value="${m}"/>
        <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
      </inertial>
    </xacro:macro>

  <!--+++++++++++++++++++++++++++-->
  <!--                           -->
  <!--      Main Wheel Macro     -->
  <!--                           -->
  <!--+++++++++++++++++++++++++++-->

  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <!-- Wheel Link -->
    <link name="${prefix}_link">
      <!-- Visual Properties -->
      <visual>
        <origin xyz="0.0 0.0 0.0" rpy="${pi/2} 0.0 0.0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Dark Dark Gray">
          <color rgba="0.3 0.3 0.3 1.0"/>
        </material>
      </visual>

      <!-- Physical Properties -->
      <collision>
        <origin xyz="0.0 0.0 0.0" rpy="${pi/2} 0.0 0.0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <!-- Joint Properties -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <!-- Back of the wheel is approximately in line with the back of the chassis (x/length) -->
      <!-- Wheel is wheel_y_gap away from the edge of the chassis -->
      <!-- 
        x-position: -base_length / 2 + wheel_radius
        y-position: y_reflect * (base_width / 2 + wheel_y_offset)
        z-position: -base_height / 2 - wheel_z_offset
      -->
      <origin xyz="${x_reflect * wheel_x_offset} ${y_reflect * wheel_y_offset} ${wheel_z_offset}" rpy="0.0 0.0 0.0"/>
      <axis xyz="0.0 1.0 0.0"/>
    </joint>
  </xacro:macro>

  <!--+++++++++++++++++++++++++++-->
  <!--                           -->
  <!--       Links / Joints      -->
  <!--                           -->
  <!--+++++++++++++++++++++++++++-->
  
  <!-- Base -->
  <link name="base_link">
    <!-- Visual Properties -->
    <visual>
      <!-- Make the visual for the robot fun -->
      <!-- Radians :( -->
      <!-- <origin xyz="${-base_length / 2} ${base_width / 2} ${-base_height / 2}" rpy="0 0 -1.5708" />
      <geometry>
        <mesh filename="package://ora_description/meshes/small_frame.stl" scale="0.001 0.001 0.001"/>
      </geometry> -->

      <!-- Dont have fun -->
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>

      <material name="custom_color">
        <color rgba="0 0.5 0.5 1.0"/>
      </material>
    </visual>

    <!-- Physical Properties -->
    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <!-- yes, these are switched around on purpose -->
    <xacro:chassis_inertia m="15" w="${base_length}" d="${base_width}" h="${base_height}"/>
  </link>

  <!-- Footprint -->
  <!-- No inertial/collision values as this is a virtual (non-physical) link -->
  <link name="base_footprint"/>

  <!-- Connect "Footprint" and "Base" through a joint -->
  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 ${-wheel_radius}" rpy="0.0 0.0 0.0"/>
  </joint>

  <!-- Main Wheels -->
  <xacro:wheel prefix="mainwheel_left" x_reflect="-1" y_reflect="1"/>
  <xacro:wheel prefix="mainwheel_right" x_reflect="-1" y_reflect="-1"/>

  <!-- Caster Wheels -->
  <!-- Front -->
  <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
    </collision>

    <xacro:sphere_inertia m="0.5" r="${caster_radius}"/>
  </link>

  <joint name="front_caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin xyz="${(base_length / 2) - caster_x_offset} ${caster_y_offset} ${-(base_height / 2) - caster_z_offset}" rpy="0 0 0"/>
  </joint>

  <xacro:zed_camera name="$(arg camera_name)" model="$(arg camera_model)" enable_gnss="false">
    <gnss_origin xyz="0 0 0" rpy="0 0 0"/>
  </xacro:zed_camera>

  <!-- Add a joint to connect the ZED Camera to the robot -->
  <joint name="$(arg camera_name)_joint" type="fixed">
    <parent link="base_link"/>
    <child link="$(arg camera_name)_camera_link"/>
    <origin xyz="${zed_x_offset} 0 ${zed_z_offset}" rpy="0 ${40 * (pi / 180)} 0" />
  </joint>

  <!-- Generic Depth Camera -->
  <link name="camera_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.015 0.130 0.022"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.015 0.130 0.022"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.035"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
  </link>

  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
        <origin xyz="${zed_x_offset} 0 ${zed_z_offset}" rpy="0 0 0" />
  </joint>

  <link name="camera_depth_frame"/>

  <joint name="camera_depth_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 ${120 * (pi / 180)}  0"/>
    <parent link="camera_link"/>
    <child link="camera_depth_frame"/>
  </joint>

  <!--+++++++++++++++++++++++++++-->
  <!--                           -->
  <!--          Odometry         -->
  <!--                           -->
  <!--+++++++++++++++++++++++++++-->
  <!-- 
      Inertial Measurement Unit (IMU):
        The IMU tracks things like specific-force, angular rate, and orientation.
        On its own, an IMU is not reliable for local odometry due to drift and noise. To get around this, we can "fuse" it
        with things like our encoders using some sort of signal processing (control system) filter. This fusion creates
        more robust/accurate localization and mapping
  -->
  <link name="imu_link">
    <visual>
        <geometry>
          <box size="0.1 0.1 0.1"/>
        </geometry>
    </visual>

    <collision>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
  </link>

  <joint name="imu_joint" type="fixed">
      <parent link="base_link"/>
      <child link="imu_link"/>
      <origin xyz="0 0 0.01"/>
  </joint>

  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/ora_25/sensors</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <!-- 
      Diff Drive:
        This plugin simulates a differential drive robot. It takes in the left and right wheel joints and calculates the
        odometry based on the wheel velocities. 
  -->
  <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
        <namespace>/ora_25/sensors</namespace>
      </ros>

      <!-- wheels -->
      <left_joint>mainwheel_left_joint</left_joint>
      <right_joint>mainwheel_right_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.4</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>false</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>

  <!-- Gazebo GPS -->
  <gazebo reference="gps_link">
    <sensor name="gps_sensor" type="gps">
      <plugin name="gps" filename="libgazebo_ros_gps_sensor.so">
        <ros>
          <namespace>/ora_25/sensors</namespace>
          <remapping>~/out:=/gps/fix</remapping>
        </ros>
      </plugin>
      <always_on>true</always_on>
      <update_rate>30</update_rate>
      <pose>0 0 0 0 0 0</pose>
      <gps>
        <position_sensing>
          <horizontal>
            <!-- <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.005</stddev>
            </noise> -->
          </horizontal>
          <vertical>
            <!-- <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.005</stddev>
            </noise> -->
          </vertical>
        </position_sensing>
      </gps>
    </sensor>
  </gazebo>

  <!-- Gazebo Generic Point Cloud Camera -->
  <gazebo reference="camera_link">
    <sensor name="depth_camera" type="depth">
      <visualize>true</visualize>
      <update_rate>30.0</update_rate>
      <camera name="camera">
        <horizontal_fov>1.047198</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3</far>
        </clip>
      </camera>
      <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <frame_name>camera_depth_frame</frame_name>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>
</robot>